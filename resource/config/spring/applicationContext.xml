<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"  
    xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:jms="http://www.springframework.org/schema/jms" xmlns:lang="http://www.springframework.org/schema/lang"  
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd    
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd    
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd    
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd    
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd    
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd    
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd    
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd    
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd    
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd    
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd    
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd"  
    default-autowire="byName">  
        
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
     	<property name="location" value="classpath:config/jdbc.properties" /> 
 	</bean> 
        
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"> 
    	<property name="driverClass">
            <value>${jdbc.driverClass}</value> 
        </property> 

        <property name="jdbcUrl"> 
            <value>${jdbc.jdbcUrl}</value>
        </property> 

        <property name="user"> 
            <value>${jdbc.user}</value> 
        </property> 

        <property name="password"> 
        	<value>${jdbc.password}</value>
        </property> 
    
    	<!--连接池中保留的最小连接数。--> 
        <property name="minPoolSize">
            <value>${jdbc.minPoolSize}</value> 
        </property> 

    	<!--连接池中保留的最大连接数。Default: 15 --> 
        <property name="maxPoolSize"> 
            <value>${jdbc.maxPoolSize}</value> 
        </property> 

   		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 --> 
        <property name="initialPoolSize"> 
            <value>${jdbc.initialPoolSize}</value> 
        </property> 

    	<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --> 
        <property name="maxIdleTime"> 
            <value>${jdbc.maxIdleTime}</value> 
        </property> 

    	<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --> 
        <property name="acquireIncrement"> 
            <value>${jdbc.acquireIncrement}</value> 
        </property>
        
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
               	 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
               	如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--> 
        <property name="maxStatements"> 
            <value>${jdbc.maxStatements}</value> 
        </property> 
        <property name="maxStatementsPerConnection"> 
            <value>100</value> 
        </property> 

    	<!--每60秒检查所有连接池中的空闲连接。Default: 0 --> 
        <property name="idleConnectionTestPeriod"> 
            <value>${jdbc.idleConnectionTestPeriod}</value> 
        </property> 

    	<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
        <property name="acquireRetryAttempts"> 
            <value>${jdbc.acquireRetryAttempts}</value> 
        </property> 

    	<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 
         	保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
       		 获取连接失败后该数据源将申明已断开并永久关闭。Default: false--> 
        <property name="breakAfterAcquireFailure"> 
            <value>${jdbc.breakAfterAcquireFailure}</value> 
        </property>
        
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
            	时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
             	等方法来提升连接测试的性能。Default: false --> 
        <property name="testConnectionOnCheckout"> 
            <value>${jdbc.testConnectionOnCheckout}</value> 
        </property> 
    </bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="create*" />  
            <tx:method name="modify*" />  
            <tx:method name="update*" /> 
            <tx:method name="remove*" />  
            <tx:method name="save*" /> 
            <tx:method name="delete*" /> 
            <tx:method name="execute*"/>
            <tx:method name="handle*"/>
            <tx:method name="comfirmOrder"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>  
    </tx:advice>  
	
	<aop:config>  
        <aop:pointcut id="txPointcut" expression="execution(* com.company.weixin.service.*Service.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />  
    </aop:config>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">              
		<property name="dataSource" ref="dataSource" />  
		<property name="mapperLocations" value="classpath:/config/mybatis/${jdbc.dialect}/*Mapper.xml"/>  
	</bean>
	
	<!-- 请求响应服务 -->
	<bean id="requestDispatchService" class="com.smile.wechat.service.impl.wechat.RequestDispatchServiceImpl">
		<property name="componentMap">
			<map>
				<entry key="text" value-ref="textRequestService"/>
				<entry key="image" value-ref="imageRequestService"/>
				<entry key="voice" value-ref="voiceRequestService"/>
				<entry key="video" value-ref="videoRequestService"/>
				<entry key="shortvideo" value-ref="shortvideoRequestService"/>
				<entry key="location" value-ref="locationRequestService"/>
				<entry key="link" value-ref="linkRequestService"/>
			</map>
		</property>
	</bean>
	
	<bean id="textRequestService" class="com.smile.wechat.service.impl.wechat.TextRequestServiceImpl"/>
	<bean id="imageRequestService" class="com.smile.wechat.service.impl.wechat.ImageRequestServiceImpl"/>
	<bean id="voiceRequestService" class="com.smile.wechat.service.impl.wechat.VoiceRequestServiceImpl"/>
	<bean id="videoRequestService" class="com.smile.wechat.service.impl.wechat.VideoRequestServiceImpl"/>
	<bean id="shortvideoRequestService" class="com.smile.wechat.service.impl.wechat.ShortvideoRequestServiceImpl"/>
	<bean id="locationRequestService" class="com.smile.wechat.service.impl.wechat.LocationRequestServiceImpl"/>
	<bean id="linkRequestService" class="com.smile.wechat.service.impl.wechat.LinkRequestServiceImpl"/>
	<bean id="eventRequestService" class="com.smile.wechat.service.impl.wechat.EventRequestServiceImpl">
		<property name="componentMap">
			<map>
				<entry key="subscribe" value-ref="subscribeEventRequestService"/>
				<entry key="unsubscribe" value-ref="unsubscribeEventRequestService"/>
				<entry key="scan" value-ref="scanEventRequestService"/>
				<entry key="location" value-ref="locationRequestService"/>
				<entry key="click" value-ref="clickEventRequestService"/>
				<entry key="view" value-ref="viewEventRequestService"/>
				<entry key="templatesendjobfinish" value-ref="templateEventRequestService"/>
			</map>
		</property>
	</bean>
	<bean id="subscribeEventRequestService" class="com.smile.wechat.service.impl.wechat.SubscribeEventRequestServiceImpl"/>
	<bean id="unsubscribeEventRequestService" class="com.smile.wechat.service.impl.wechat.UnsubscribeEventRequestServiceImpl"/>
	<bean id="scanEventRequestService" class="com.smile.wechat.service.impl.wechat.ScanEventRequestServiceImpl"/>
	<bean id="clickEventRequestService" class="com.smile.wechat.service.impl.wechat.ClickEventRequestServiceImpl"/>
	<bean id="viewEventRequestService" class="com.smile.wechat.service.impl.wechat.ViewEventRequestServiceImpl"/>
	<bean id="templateEventRequestService" class="com.smile.wechat.service.impl.wechat.TemplateEventRequestServiceImpl"/>
	
		
	<!-- 服务号 -->
	<bean id="weixinAccountService" class="com.company.weixin.service.Impl.WeixinAccountServiceImpl">
		<property name="weixinAccountDao" ref="weixinAccountDao"/>
	</bean>
	<bean id="weixinAccountDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.WeixinAccountDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>	
		
	<!-- 自定义菜单 -->
	<bean id="weixinMenuService" class="com.company.weixin.service.Impl.WeixinMenuServiceImpl">
		<property name="weixinMenuDao" ref="weixinMenuDao"/>
	</bean>
	<bean id="weixinMenuDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.WeixinMenuDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>
	
	<!-- 业务逻辑模块 -->
	<bean id="wxbModuleService" class="com.company.weixin.service.Impl.WXBModuleServiceImpl">
		<property name="wxbModuleDao" ref="wxbModuleDao"/>
	</bean>
	<bean id="wxbModuleDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.WXBModuleDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>			
	
	<!-- 消息日志 -->	
	<bean id="messageLogService" class="com.company.weixin.service.Impl.MessageLogServiceImpl">
	    <property name="messageLogDao" ref="messageLogDao"/>
	</bean>
	<bean id="messageLogDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.MessageLogDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>
	
	<!-- 系统参数 -->
	<bean id="sysConfService" class="com.company.weixin.service.Impl.SysConfServiceImpl">
		<property name="sysConfDao" ref="sysConfDao"/>
	</bean>
	<bean id="sysConfDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.SysConfDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>	
	
	<!-- 微信关注用户 -->
	<bean id="userService" class="com.company.weixin.service.Impl.UserServiceImpl">
	    <property name="userDao" ref="userDao"/>
	</bean>
	<bean id="userDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.UserDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>
	
	<!-- 数据字典 -->
	<bean id="sysDictService" class="com.company.weixin.service.Impl.SysDictServiceImpl">
	    <property name="sysDictDao" ref="sysDictDao"/>
	</bean>
	<bean id="sysDictDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.SysDictDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>
	
	<!-- 微信支付 -->
	<bean id="wxPayService" class="com.company.weixin.service.Impl.WXPayServiceImpl">
	    <property name="wxPayDao" ref="wxPayDao"/>
	</bean>
	<bean id="wxPayDao" class="org.mybatis.spring.mapper.MapperFactoryBean">        
		<property name="mapperInterface" value="com.company.weixin.dao.WXPayDao"></property>        
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>    
	</bean>
	
</beans>
